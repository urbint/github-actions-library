name: "Integration Checks"

description: "Run integration checks including migrations, integration tests, and seed data tests"

inputs:
  repository:
    description: 'Repository to check out'
    required: true
    default: 'main-repo'
  postgres_host:
    description: 'PostgreSQL Host'
    required: true
  postgres_user:
    description: 'PostgreSQL User'
    required: true
  postgres_pass:
    description: 'PostgreSQL Password'
    required: true
  postgres_db:
    description: 'PostgreSQL Database'
    required: true
  redis_host:
    description: 'Redis Host'
    required: true
  protocol_buffers_python_implementation:
    description: 'Protocol Buffers Python Implementation'
    required: true
  branch_name:
    description: 'Branch Name'
    required: true  

runs:
  using: "composite"
  steps:
    
    - name: "Check out repository"
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch_name }}

    
    - name: "Set up Python environment"
      run: |
        python -m venv .venv
        . .venv/bin/activate
        python -m pip install --upgrade pip
        pip install poetry==1.7.1
        poetry config virtualenvs.in-project true
        poetry install
        pip install pytest-rerunfailures
      shell: bash

    # Run Migrations
    - name: "Run Migrations"
      run: |
        . .venv/bin/activate
        alembic upgrade head
        alembic downgrade -1
      shell: bash
      env:
        POSTGRES_HOST: ${{ inputs.postgres_host }}
        POSTGRES_USER: ${{ inputs.postgres_user }}
        POSTGRES_PASS: ${{ inputs.postgres_pass }}
        POSTGRES_DB: ${{ inputs.postgres_db }}
        REDIS_HOST: ${{ inputs.redis_host }}

    # Run Integration Tests
    - name: "Run Integration Tests"
      run: |
        sudo apt-get update && sudo apt-get -y install libpq-dev && sudo apt-get clean
        . .venv/bin/activate
        pytest --reruns 1 --durations=30 -n auto --maxprocesses=8 -k 'not test_project_number_as_alphanumeric' --ignore=tests/integration/risk_model/explain_functions/test_explain_methods_no_exception.py
        pytest --reruns 1 --durations=5 -v tests/integration/risk_model/explain_functions/test_explain_methods_no_exception.py
        pytest -v tests/integration/mutations/test_projects.py
      shell: bash
      env:
        POSTGRES_HOST: ${{ inputs.postgres_host }}
        POSTGRES_USER: ${{ inputs.postgres_user }}
        POSTGRES_PASS: ${{ inputs.postgres_pass }}
        POSTGRES_DB: ${{ inputs.postgres_db }}
        REDIS_HOST: ${{ inputs.redis_host }}
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: ${{ inputs.protocol_buffers_python_implementation }}

    # Run Seed Data Generation, Backup, and Restoration
    - name: "Test Seed Data Generation, Backup, and Restoration"
      run: |
        apt-get update
        apt-get install -y postgresql-common gnupg
        sh /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y
        apt-get update
        apt-get install -y postgresql-client-13
        . .venv/bin/activate
        
        # Ensure that async code is handled with asyncio.run()
        python -m asyncio run python ./support/scripts/seed/main.py recreate-backup
        python -m asyncio run python ./support/scripts/seed/main.py restore-from-backup
      shell: bash
      env:
        POSTGRES_HOST: ${{ inputs.postgres_host }}
        POSTGRES_USER: ${{ inputs.postgres_user }}
        POSTGRES_PASS: ${{ inputs.postgres_pass }}
        POSTGRES_DB: ${{ inputs.postgres_db }}
        REDIS_HOST: ${{ inputs.redis_host }}
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: ${{ inputs.protocol_buffers_python_implementation }}
