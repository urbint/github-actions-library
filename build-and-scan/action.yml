name: Build and Scan Docker Image

description: Build a Docker image and scan it for vulnerabilities using Trivy.

inputs:
  image_name:
    description: 'The name and tag of the Docker image (e.g., my-image:latest).'
    required: true
  dockerfile:
    description: 'Path to the Dockerfile.'
    required: true
    default: 'Dockerfile'
  context:
    description: 'Build context path.'
    required: true
    default: '.'  # Default to current directory

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      id: build
      shell: bash
      run: |
        pwd
        ls -lrth
        docker build -t ${{ inputs.image_name }} -f ${{ inputs.dockerfile }} ${{ inputs.context }}

    - name: List Docker Images
      shell: bash
      run: docker images

    # Cache Trivy DB to avoid downloading it on each run
    - name: Cache Trivy DB
      id: cache-trivy-db
      uses: actions/cache@v3
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          trivy-db-${{ runner.os }}-
          trivy-db-

    - name: Install Trivy
      shell: bash
      run: |
        curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.45.1/trivy_0.45.1_Linux-64bit.deb -o trivy.deb
        sudo dpkg -i trivy.deb

    # Add retry mechanism to handle temporary rate limit failures
    - name: Run Trivy Scan
      id: trivy
      shell: bash
      run: |
        echo "Running Trivy scan for image: ${{ inputs.image_name }}"
        # Retry logic for DB download error
        MAX_RETRIES=5
        RETRY_COUNT=0
        SUCCESS=false
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # Run the Trivy scan command
          trivy image --severity HIGH,CRITICAL --format json --no-progress --cache-dir /tmp/trivy-cache ${{ inputs.image_name }} > trivy-report.json
          if [ $? -eq 0 ]; then
            SUCCESS=true
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Retrying Trivy scan... Attempt $RETRY_COUNT of $MAX_RETRIES"
            sleep 5
          fi
        done

        if [ "$SUCCESS" = true ]; then
          cat trivy-report.json
        else
          echo "Trivy scan failed after $MAX_RETRIES attempts."
          exit 1
        fi

    - name: Fail if Trivy Scan Fails
      if: ${{ steps.trivy.outcome != 'success' }}
      shell: bash
      run: |
        echo "Trivy scan failed, vulnerabilities found in image!"
        exit 1
